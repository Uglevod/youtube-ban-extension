// YouTube Ban Extension - Content Script

class YouTubeBanManager {
  constructor() {
    this.bannedVideos = new Set();
    this.bannedChannels = new Set();
    this.observer = null;
    this.init();
  }

  async init() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∞—Ö –∏–∑ storage
    await this.loadBannedData();
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
    this.startObserver();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.processExistingElements();
  }

  async loadBannedData() {
    try {
      const result = await browser.storage.local.get(['bannedVideos', 'bannedChannels']);
      this.bannedVideos = new Set(result.bannedVideos || []);
      this.bannedChannels = new Set(result.bannedChannels || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–Ω–∞—Ö:', error);
    }
  }

  startObserver() {
    this.observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              this.processElement(node);
            }
          });
        }
      });
    });

    this.observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }

  processExistingElements() {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∏–¥–µ–æ
    const videoElements = document.querySelectorAll('ytd-rich-item-renderer');
    videoElements.forEach(element => this.processElement(element));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    const sidebarElements = document.querySelectorAll('yt-lockup-view-model');
    sidebarElements.forEach(element => this.processElement(element));
  }

  processElement(element) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–µ–æ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ
    let videoElement = element.closest('ytd-rich-item-renderer') || 
                      (element.matches('ytd-rich-item-renderer') ? element : null);
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    if (!videoElement) {
      videoElement = element.closest('yt-lockup-view-model') || 
                    (element.matches('yt-lockup-view-model') ? element : null);
    }
    
    if (!videoElement) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
    if (videoElement.dataset.banButtonsAdded) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∏ –∫–∞–Ω–∞–ª–µ
    const videoInfo = this.extractVideoInfo(videoElement);
    if (!videoInfo) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
    if (this.isElementBanned(videoInfo)) {
      this.hideElement(videoElement);
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
    const isSidebar = videoElement.closest('ytd-watch-next-secondary-results-renderer') !== null ||
                     videoElement.classList.contains('yt-lockup-view-model--horizontal');

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∞
    this.addBanButtons(videoElement, videoInfo, isSidebar);
    videoElement.dataset.banButtonsAdded = 'true';
  }

  extractVideoInfo(element) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã YouTube
      const videoLink = element.querySelector('a[href*="/watch?v="]');
      if (!videoLink) return null;

      const videoUrl = videoLink.href;
      const videoId = this.extractVideoId(videoUrl);
      if (!videoId) return null;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ - —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      let channelLink = element.querySelector('a[href*="/@"]');
      
      // –î–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∫–∞–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ –±–µ–∑ —Å—Å—ã–ª–∫–∏
      if (!channelLink) {
        const channelText = element.querySelector('.yt-content-metadata-view-model__metadata-text');
        if (channelText && !channelText.querySelector('a')) {
          // –≠—Ç–æ —Ç–µ–∫—Å—Ç –∫–∞–Ω–∞–ª–∞ –±–µ–∑ —Å—Å—ã–ª–∫–∏
          return {
            videoId,
            videoUrl,
            channelName: channelText.textContent.trim(),
            channelUrl: '',
            element
          };
        }
      }
      
      const channelName = channelLink ? channelLink.textContent.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
      const channelUrl = channelLink ? channelLink.href : '';

      return {
        videoId,
        videoUrl,
        channelName,
        channelUrl,
        element
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:', error);
      return null;
    }
  }

  extractVideoId(url) {
    const match = url.match(/[?&]v=([^&]+)/);
    return match ? match[1] : null;
  }

  // –î–µ–ª–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  static extractVideoId(url) {
    const match = url.match(/[?&]v=([^&]+)/);
    return match ? match[1] : null;
  }

  isElementBanned(videoInfo) {
    return this.bannedVideos.has(videoInfo.videoId) || 
           this.bannedChannels.has(videoInfo.channelName);
  }

  hideElement(element) {
    element.style.display = 'none';
  }

  toggleBanPanel(buttonContainer, compactBtn) {
    const isExpanded = buttonContainer.classList.contains('expanded');
    
    if (isExpanded) {
      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
      buttonContainer.classList.remove('expanded');
      compactBtn.classList.remove('expanded');
      compactBtn.textContent = '–ë';
      compactBtn.title = '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –±–∞–Ω–∞';
    } else {
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
      buttonContainer.classList.add('expanded');
      compactBtn.classList.add('expanded');
      compactBtn.textContent = '‚úï';
      compactBtn.title = '–°–∫—Ä—ã—Ç—å –æ–ø—Ü–∏–∏ –±–∞–Ω–∞';
    }
  }

  addBanButtons(element, videoInfo, isSidebar = false) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const buttonContainer = document.createElement('div');
    buttonContainer.className = `yt-ban-buttons-container${isSidebar ? ' sidebar' : ''}`;
    
    // –ö–Ω–æ–ø–∫–∞ –±–∞–Ω–∞ –≤–∏–¥–µ–æ
    const banVideoBtn = document.createElement('button');
    banVideoBtn.className = 'yt-ban-btn yt-ban-video-btn';
    banVideoBtn.textContent = isSidebar ? 'üö´ –í–∏–¥–µ–æ' : 'üö´ –ë–∞–Ω –≤–∏–¥–µ–æ';
    banVideoBtn.title = '–ó–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ';
    banVideoBtn.onclick = () => this.banVideo(videoInfo);

    // –ö–Ω–æ–ø–∫–∞ –±–∞–Ω–∞ –∫–∞–Ω–∞–ª–∞
    const banChannelBtn = document.createElement('button');
    banChannelBtn.className = 'yt-ban-btn yt-ban-channel-btn';
    banChannelBtn.textContent = isSidebar ? 'üö´ –ö–∞–Ω–∞–ª' : 'üö´ –ë–∞–Ω –∫–∞–Ω–∞–ª';
    banChannelBtn.title = '–ó–∞–±–∞–Ω–∏—Ç—å –≤–µ—Å—å –∫–∞–Ω–∞–ª';
    banChannelBtn.onclick = () => this.banChannel(videoInfo);

    buttonContainer.appendChild(banVideoBtn);
    buttonContainer.appendChild(banChannelBtn);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É "–ë"
    const compactBtn = document.createElement('button');
    compactBtn.className = `yt-ban-compact-btn${isSidebar ? ' sidebar' : ''}`;
    compactBtn.textContent = '–ë';
    compactBtn.title = '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –±–∞–Ω–∞';
    compactBtn.onclick = () => this.toggleBanPanel(buttonContainer, compactBtn);

    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
    let targetContainer;
    
    if (isSidebar) {
      // –î–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      targetContainer = element.querySelector('.yt-lockup-metadata-view-model__text-container') ||
                       element.querySelector('.yt-lockup-metadata-view-model');
    } else {
      // –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤–∏–¥–µ–æ
      targetContainer = element.querySelector('.yt-lockup-metadata-view-model__text-container');
    }
    
    if (targetContainer) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –ø–∞–Ω–µ–ª—å
      targetContainer.appendChild(compactBtn);
      targetContainer.appendChild(buttonContainer);
    } else {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π YouTube
      const fallbackContainer = element.querySelector('.yt-lockup-metadata-view-model, #metadata, .metadata');
      
      if (fallbackContainer) {
        fallbackContainer.appendChild(compactBtn);
        fallbackContainer.appendChild(buttonContainer);
      } else {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —ç–ª–µ–º–µ–Ω—Ç–∞
        element.appendChild(compactBtn);
        element.appendChild(buttonContainer);
      }
    }
  }

  async banVideo(videoInfo) {
    this.bannedVideos.add(videoInfo.videoId);
    await this.saveBannedData();
    this.hideElement(videoInfo.element);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification('–í–∏–¥–µ–æ –∑–∞–±–∞–Ω–µ–Ω–æ!');
  }

  async banChannel(videoInfo) {
    this.bannedChannels.add(videoInfo.channelName);
    await this.saveBannedData();
    this.hideElement(videoInfo.element);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    this.hideChannelVideos(videoInfo.channelName);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification(`–ö–∞–Ω–∞–ª "${videoInfo.channelName}" –∑–∞–±–∞–Ω–µ–Ω!`);
  }

  hideChannelVideos(channelName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    const allVideoElements = document.querySelectorAll('ytd-rich-item-renderer');
    allVideoElements.forEach(element => {
      const channelLink = element.querySelector('a[href*="/@"]');
      if (channelLink && channelLink.textContent.trim() === channelName) {
        this.hideElement(element);
      }
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    const sidebarElements = document.querySelectorAll('yt-lockup-view-model');
    sidebarElements.forEach(element => {
      const channelLink = element.querySelector('a[href*="/@"]');
      const channelText = element.querySelector('.yt-content-metadata-view-model__metadata-text');
      
      if ((channelLink && channelLink.textContent.trim() === channelName) ||
          (channelText && !channelText.querySelector('a') && channelText.textContent.trim() === channelName)) {
        this.hideElement(element);
      }
    });
  }

  async saveBannedData() {
    try {
      await browser.storage.local.set({
        bannedVideos: Array.from(this.bannedVideos),
        bannedChannels: Array.from(this.bannedChannels)
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–Ω–∞—Ö:', error);
    }
  }

  showNotification(message) {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'yt-ban-notification';
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #ff4444;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      z-index: 10000;
      font-family: Arial, sans-serif;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 3000);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–Ω–æ–≤
const banManager = new YouTubeBanManager();

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup
browser.runtime.onMessage.addListener((request, sender, sendResponse) => {
  switch (request.action) {
    case 'unbanAll':
      banManager.bannedVideos.clear();
      banManager.bannedChannels.clear();
      banManager.saveBannedData();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const hiddenElements = document.querySelectorAll('ytd-rich-item-renderer[style*="display: none"], yt-lockup-view-model[style*="display: none"]');
      hiddenElements.forEach(element => {
        element.style.display = '';
      });
      
      // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∞
      const buttonContainers = document.querySelectorAll('.yt-ban-buttons-container');
      buttonContainers.forEach(container => {
        container.remove();
      });
      
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      const compactButtons = document.querySelectorAll('.yt-ban-compact-btn');
      compactButtons.forEach(button => {
        button.remove();
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const processedElements = document.querySelectorAll('[data-ban-buttons-added]');
      processedElements.forEach(element => {
        delete element.dataset.banButtonsAdded;
      });
      
      // –ü–µ—Ä–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      banManager.processExistingElements();
      
      sendResponse({success: true});
      break;

    case 'unbanVideo':
      banManager.bannedVideos.delete(request.videoId);
      banManager.saveBannedData();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –≤–∏–¥–µ–æ —Å —ç—Ç–∏–º ID
      const hiddenVideos = document.querySelectorAll('ytd-rich-item-renderer[style*="display: none"], yt-lockup-view-model[style*="display: none"]');
      hiddenVideos.forEach(element => {
        const videoLink = element.querySelector('a[href*="/watch?v="]');
        if (videoLink) {
          const videoId = YouTubeBanManager.extractVideoId(videoLink.href);
          if (videoId === request.videoId) {
            element.style.display = '';
          }
        }
      });
      
      sendResponse({success: true});
      break;

    case 'unbanChannel':
      banManager.bannedChannels.delete(request.channelName);
      banManager.saveBannedData();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –≤–∏–¥–µ–æ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      const hiddenChannels = document.querySelectorAll('ytd-rich-item-renderer[style*="display: none"], yt-lockup-view-model[style*="display: none"]');
      hiddenChannels.forEach(element => {
        const channelLink = element.querySelector('a[href*="/@"]');
        const channelText = element.querySelector('.yt-content-metadata-view-model__metadata-text');
        
        if ((channelLink && channelLink.textContent.trim() === request.channelName) ||
            (channelText && !channelText.querySelector('a') && channelText.textContent.trim() === request.channelName)) {
          element.style.display = '';
        }
      });
      
      sendResponse({success: true});
      break;

    default:
      sendResponse({success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'});
  }
});
